name: Release package to pub.dev.
description: >
  Release a new package version to pub.dev and link to it from GitHub Releases.

inputs:
  path:
    description: Root directory of a Dart package.
    default: '.'
  dry-run:
    description: If true, no package is published to pub.dev and no GitHub Release is created.
    default: 'false'

outputs:
  package_name:
    description: Name of the package.
    value: ${{ steps.extract_package_name.outputs.result }}
  package_version:
    description: Version of the package.
    value: ${{ steps.extract_package_version.outputs.result }}
  changelog_url:
    description: URL of the package's release notes on pub.dev.
    value: ${{ steps.create_metadata.outputs.changelog_url }}
  prerelease:
    description: Whether the published version is a prerelease ("true" or "false").
    value: ${{ steps.create_metadata.outputs.prerelease }}

runs:
  using: composite

  steps:
    - name: Download mobile-tools
      uses: actions/checkout@v4
      with:
        repository: leancodepl/mobile-tools
        path: mobile-tools

    - name: Add mobile-tools to $PATH
      shell: bash
      run: echo "$GITHUB_WORKSPACE/mobile-tools/bin" >> $GITHUB_PATH

    - name: Extract package name from pubspec
      id: extract_package_name
      uses: mikefarah/yq@master
      with:
        cmd: cat "${{ inputs.path }}/pubspec.yaml" | yq '.name'

    - name: Extract package version from pubspec
      id: extract_package_version
      uses: mikefarah/yq@master
      with:
        cmd: cat "${{ inputs.path }}/pubspec.yaml" | yq '.version'

    - name: Export release metadata as environment variables
      shell: bash
      run: |
        package_name=${{ steps.extract_package_name.outputs.result }}
        package_version=${{ steps.extract_package_version.outputs.result }}

        echo "package name: $package_name"
        echo "package version: $package_version"

        changelog_url="$(link_changelog "$package_name" "$package_version")"
        prerelease="$(is_prerelease "$package_version")"
        echo "CHANGELOG_URL=$changelog_url" >> $GITHUB_ENV
        echo "PRERELEASE=$prerelease" >> $GITHUB_ENV

    - name: Set action output
      id: create_metadata
      shell: bash
      run: |
        echo "changelog_url=${{ env.CHANGELOG_URL }}" >> $GITHUB_OUTPUT
        echo "prerelease=${{ env.PRERELEASE}}" >> $GITHUB_OUTPUT

    # If `flutter` command is not available, use `dart pub publish`
    # If `flutter` command is available, use `flutter pub publish`
    # See also: https://github.com/dart-lang/setup-dart/issues/68
    - name: Publish to pub.dev
      shell: bash
      run: >
        args="";
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          args="--dry-run";
        else
          args="--force";
        fi;
        cd "${{ inputs.path }}";
        if command -v flutter 1>/dev/null 2>&1; then
          flutter pub publish "$args";
        else
          dart pub publish "$args";
        fi

    - name: Create release on GitHub
      uses: softprops/action-gh-release@v2
      if: inputs.dry-run == 'false'
      with:
        name: ${{ github.ref_name }}
        body: '[See changelog on pub.dev](${{ env.CHANGELOG_URL }})'
        prerelease: ${{ env.PRERELEASE }}
